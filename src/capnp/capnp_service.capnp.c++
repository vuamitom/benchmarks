// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: capnp_service.capnp

#include "capnp_service.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<63> b_865a538b5b3a1994 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    148,  25,  58,  91, 139,  83,  90, 134,
     24,   0,   0,   0,   1,   0,   1,   0,
     20, 225, 251,  94,  15, 126, 133, 212,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 100, 108,  47,  99,  97, 112, 110,
    112,  95, 115, 101, 114, 118, 105,  99,
    101,  46,  99,  97, 112, 110, 112,  58,
     68,  97, 116, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   5,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
    121, 101,  97, 114,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 111, 110, 116, 104,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 121,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_865a538b5b3a1994 = b_865a538b5b3a1994.words;
#if !CAPNP_LITE
static const uint16_t m_865a538b5b3a1994[] = {2, 1, 0};
static const uint16_t i_865a538b5b3a1994[] = {0, 1, 2};
const ::capnp::_::RawSchema s_865a538b5b3a1994 = {
  0x865a538b5b3a1994, b_865a538b5b3a1994.words, 63, nullptr, m_865a538b5b3a1994,
  0, 3, i_865a538b5b3a1994, nullptr, nullptr, { &s_865a538b5b3a1994, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<78> b_b19d39826e37b3ed = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    237, 179,  55, 110, 130,  57, 157, 177,
     24,   0,   0,   0,   1,   0,   1,   0,
     20, 225, 251,  94,  15, 126, 133, 212,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 100, 108,  47,  99,  97, 112, 110,
    112,  95, 115, 101, 114, 118, 105,  99,
    101,  46,  99,  97, 112, 110, 112,  58,
     65, 100, 100, 114, 101, 115, 115,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
     99, 105, 116, 121,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    122, 105, 112,  99, 111, 100, 101,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 114, 101, 101, 116,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 117, 109,  98, 101, 114,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b19d39826e37b3ed = b_b19d39826e37b3ed.words;
#if !CAPNP_LITE
static const uint16_t m_b19d39826e37b3ed[] = {0, 3, 2, 1};
static const uint16_t i_b19d39826e37b3ed[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_b19d39826e37b3ed = {
  0xb19d39826e37b3ed, b_b19d39826e37b3ed.words, 78, nullptr, m_b19d39826e37b3ed,
  0, 4, i_b19d39826e37b3ed, nullptr, nullptr, { &s_b19d39826e37b3ed, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<84> b_9a63a7bade046267 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    103,  98,   4, 222, 186, 167,  99, 154,
     24,   0,   0,   0,   1,   0,   0,   0,
     20, 225, 251,  94,  15, 126, 133, 212,
      4,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 100, 108,  47,  99,  97, 112, 110,
    112,  95, 115, 101, 114, 118, 105,  99,
    101,  46,  99,  97, 112, 110, 112,  58,
     83,  99, 104, 111, 111, 108,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 100, 100, 114, 101, 115, 115,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    237, 179,  55, 110, 130,  57, 157, 177,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 111, 117, 110, 100,  97, 116, 105,
    111, 110,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    148,  25,  58,  91, 139,  83,  90, 134,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 109,  97, 105, 108,  65, 100, 100,
    114, 101, 115, 115, 101, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9a63a7bade046267 = b_9a63a7bade046267.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9a63a7bade046267[] = {
  &s_865a538b5b3a1994,
  &s_b19d39826e37b3ed,
};
static const uint16_t m_9a63a7bade046267[] = {1, 3, 2, 0};
static const uint16_t i_9a63a7bade046267[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_9a63a7bade046267 = {
  0x9a63a7bade046267, b_9a63a7bade046267.words, 84, d_9a63a7bade046267, m_9a63a7bade046267,
  2, 4, i_9a63a7bade046267, nullptr, nullptr, { &s_9a63a7bade046267, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<63> b_b23419e6037f239f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    159,  35, 127,   3, 230,  25,  52, 178,
     24,   0,   0,   0,   1,   0,   1,   0,
     20, 225, 251,  94,  15, 126, 133, 212,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 100, 108,  47,  99,  97, 112, 110,
    112,  95, 115, 101, 114, 118, 105,  99,
    101,  46,  99,  97, 112, 110, 112,  58,
     83, 117,  98, 106, 101,  99, 116,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 105, 116, 108, 101,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 100, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b23419e6037f239f = b_b23419e6037f239f.words;
#if !CAPNP_LITE
static const uint16_t m_b23419e6037f239f[] = {2, 0, 1};
static const uint16_t i_b23419e6037f239f[] = {0, 1, 2};
const ::capnp::_::RawSchema s_b23419e6037f239f = {
  0xb23419e6037f239f, b_b23419e6037f239f.words, 63, nullptr, m_b23419e6037f239f,
  0, 3, i_b23419e6037f239f, nullptr, nullptr, { &s_b23419e6037f239f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<155> b_ccd62e7959248f0a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     10, 143,  36,  89, 121,  46, 214, 204,
     24,   0,   0,   0,   1,   0,   1,   0,
     20, 225, 251,  94,  15, 126, 133, 212,
      7,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 199,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 100, 108,  47,  99,  97, 112, 110,
    112,  95, 115, 101, 114, 118, 105,  99,
    101,  46,  99,  97, 112, 110, 112,  58,
     83, 116, 117, 100, 101, 110, 116,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     32,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    209,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    204,   0,   0,   0,   3,   0,   1,   0,
    216,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    213,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    208,   0,   0,   0,   3,   0,   1,   0,
    220,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    217,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    216,   0,   0,   0,   3,   0,   1,   0,
    228,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    225,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    224,   0,   0,   0,   3,   0,   1,   0,
    236,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    233,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    228,   0,   0,   0,   3,   0,   1,   0,
    240,   0,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    237,   0,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    240,   0,   0,   0,   3,   0,   1,   0,
     12,   1,   0,   0,   2,   0,   1,   0,
      6,   0,   0,   0,   5,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   1,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   1,   0,   0,   3,   0,   1,   0,
     36,   1,   0,   0,   2,   0,   1,   0,
      7,   0,   0,   0,   6,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   1,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     28,   1,   0,   0,   3,   0,   1,   0,
     56,   1,   0,   0,   2,   0,   1,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 114, 105, 101, 110, 100, 115,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 109, 101,  65, 100, 100, 114,
    101, 115, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    237, 179,  55, 110, 130,  57, 157, 177,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 105, 114, 116, 104,  80, 108,  97,
     99, 101,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    237, 179,  55, 110, 130,  57, 157, 177,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 105, 114, 116, 104,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    148,  25,  58,  91, 139,  83,  90, 134,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  97, 118, 111, 114, 105, 116, 101,
     83, 117,  98, 106, 101,  99, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    159,  35, 127,   3, 230,  25,  52, 178,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 109,  97, 105, 108,  65, 100, 100,
    114, 101, 115, 115, 101, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  99, 104, 111, 111, 108, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    103,  98,   4, 222, 186, 167,  99, 154,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ccd62e7959248f0a = b_ccd62e7959248f0a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ccd62e7959248f0a[] = {
  &s_865a538b5b3a1994,
  &s_9a63a7bade046267,
  &s_b19d39826e37b3ed,
  &s_b23419e6037f239f,
};
static const uint16_t m_ccd62e7959248f0a[] = {4, 3, 6, 5, 1, 2, 0, 7};
static const uint16_t i_ccd62e7959248f0a[] = {0, 1, 2, 3, 4, 5, 6, 7};
const ::capnp::_::RawSchema s_ccd62e7959248f0a = {
  0xccd62e7959248f0a, b_ccd62e7959248f0a.words, 155, d_ccd62e7959248f0a, m_ccd62e7959248f0a,
  4, 8, i_ccd62e7959248f0a, nullptr, nullptr, { &s_ccd62e7959248f0a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_d2ef0ae85e271446 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     70,  20,  39,  94, 232,  10, 239, 210,
     24,   0,   0,   0,   1,   0,   0,   0,
     20, 225, 251,  94,  15, 126, 133, 212,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 100, 108,  47,  99,  97, 112, 110,
    112,  95, 115, 101, 114, 118, 105,  99,
    101,  46,  99,  97, 112, 110, 112,  58,
     83, 116, 117, 100, 101, 110, 116,  68,
     97, 116,  97,  82, 101, 115, 112, 111,
    110, 115, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    115, 116, 117, 100, 101, 110, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     10, 143,  36,  89, 121,  46, 214, 204,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d2ef0ae85e271446 = b_d2ef0ae85e271446.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d2ef0ae85e271446[] = {
  &s_ccd62e7959248f0a,
};
static const uint16_t m_d2ef0ae85e271446[] = {0};
static const uint16_t i_d2ef0ae85e271446[] = {0};
const ::capnp::_::RawSchema s_d2ef0ae85e271446 = {
  0xd2ef0ae85e271446, b_d2ef0ae85e271446.words, 40, d_d2ef0ae85e271446, m_d2ef0ae85e271446,
  1, 1, i_d2ef0ae85e271446, nullptr, nullptr, { &s_d2ef0ae85e271446, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<53> b_b06fe64f26aed999 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    153, 217, 174,  38,  79, 230, 111, 176,
     24,   0,   0,   0,   3,   0,   0,   0,
     20, 225, 251,  94,  15, 126, 133, 212,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 199,   0,   0,   0,
    165,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 100, 108,  47,  99,  97, 112, 110,
    112,  95, 115, 101, 114, 118, 105,  99,
    101,  46,  99,  97, 112, 110, 112,  58,
     67,  97, 112, 110, 112,  83, 101, 114,
    118, 105,  99, 101,  66, 101, 110,  99,
    104, 109,  97, 114, 107,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    243, 243, 241, 103, 116, 104, 173, 166,
     29,  68, 126, 239,  92, 187, 140, 245,
     81,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    177, 139, 254,  35,  38, 214,   4, 240,
     78,  64,  26, 127, 167, 154, 233, 134,
     61,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    243,  92, 136, 230,   1,  10, 162, 227,
     70,  38, 114,  98, 133,  74, 189, 132,
     37,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
    103, 101, 116,  65, 110, 115, 119, 101,
    114,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  66, 108, 111,  98,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  83, 116, 114, 117,  99,
    116, 115,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_b06fe64f26aed999 = b_b06fe64f26aed999.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b06fe64f26aed999[] = {
  &s_84bd4a8562722646,
  &s_86e99aa77f1a404e,
  &s_a6ad687467f1f3f3,
  &s_e3a20a01e6885cf3,
  &s_f004d62623fe8bb1,
  &s_f58cbb5cef7e441d,
};
static const uint16_t m_b06fe64f26aed999[] = {0, 1, 2};
const ::capnp::_::RawSchema s_b06fe64f26aed999 = {
  0xb06fe64f26aed999, b_b06fe64f26aed999.words, 53, d_b06fe64f26aed999, m_b06fe64f26aed999,
  6, 3, nullptr, nullptr, nullptr, { &s_b06fe64f26aed999, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_a6ad687467f1f3f3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    243, 243, 241, 103, 116, 104, 173, 166,
     46,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 100, 108,  47,  99,  97, 112, 110,
    112,  95, 115, 101, 114, 118, 105,  99,
    101,  46,  99,  97, 112, 110, 112,  58,
     67,  97, 112, 110, 112,  83, 101, 114,
    118, 105,  99, 101,  66, 101, 110,  99,
    104, 109,  97, 114, 107,  46, 103, 101,
    116,  65, 110, 115, 119, 101, 114,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    110, 117, 109,  98, 101, 114,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a6ad687467f1f3f3 = b_a6ad687467f1f3f3.words;
#if !CAPNP_LITE
static const uint16_t m_a6ad687467f1f3f3[] = {0};
static const uint16_t i_a6ad687467f1f3f3[] = {0};
const ::capnp::_::RawSchema s_a6ad687467f1f3f3 = {
  0xa6ad687467f1f3f3, b_a6ad687467f1f3f3.words, 36, nullptr, m_a6ad687467f1f3f3,
  0, 1, i_a6ad687467f1f3f3, nullptr, nullptr, { &s_a6ad687467f1f3f3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_f58cbb5cef7e441d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     29,  68, 126, 239,  92, 187, 140, 245,
     46,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 100, 108,  47,  99,  97, 112, 110,
    112,  95, 115, 101, 114, 118, 105,  99,
    101,  46,  99,  97, 112, 110, 112,  58,
     67,  97, 112, 110, 112,  83, 101, 114,
    118, 105,  99, 101,  66, 101, 110,  99,
    104, 109,  97, 114, 107,  46, 103, 101,
    116,  65, 110, 115, 119, 101, 114,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f58cbb5cef7e441d = b_f58cbb5cef7e441d.words;
#if !CAPNP_LITE
static const uint16_t m_f58cbb5cef7e441d[] = {0};
static const uint16_t i_f58cbb5cef7e441d[] = {0};
const ::capnp::_::RawSchema s_f58cbb5cef7e441d = {
  0xf58cbb5cef7e441d, b_f58cbb5cef7e441d.words, 36, nullptr, m_f58cbb5cef7e441d,
  0, 1, i_f58cbb5cef7e441d, nullptr, nullptr, { &s_f58cbb5cef7e441d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_f004d62623fe8bb1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    177, 139, 254,  35,  38, 214,   4, 240,
     46,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 100, 108,  47,  99,  97, 112, 110,
    112,  95, 115, 101, 114, 118, 105,  99,
    101,  46,  99,  97, 112, 110, 112,  58,
     67,  97, 112, 110, 112,  83, 101, 114,
    118, 105,  99, 101,  66, 101, 110,  99,
    104, 109,  97, 114, 107,  46, 103, 101,
    116,  66, 108, 111,  98,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f004d62623fe8bb1 = b_f004d62623fe8bb1.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f004d62623fe8bb1 = {
  0xf004d62623fe8bb1, b_f004d62623fe8bb1.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f004d62623fe8bb1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_86e99aa77f1a404e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     78,  64,  26, 127, 167, 154, 233, 134,
     46,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 100, 108,  47,  99,  97, 112, 110,
    112,  95, 115, 101, 114, 118, 105,  99,
    101,  46,  99,  97, 112, 110, 112,  58,
     67,  97, 112, 110, 112,  83, 101, 114,
    118, 105,  99, 101,  66, 101, 110,  99,
    104, 109,  97, 114, 107,  46, 103, 101,
    116,  66, 108, 111,  98,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_86e99aa77f1a404e = b_86e99aa77f1a404e.words;
#if !CAPNP_LITE
static const uint16_t m_86e99aa77f1a404e[] = {0};
static const uint16_t i_86e99aa77f1a404e[] = {0};
const ::capnp::_::RawSchema s_86e99aa77f1a404e = {
  0x86e99aa77f1a404e, b_86e99aa77f1a404e.words, 36, nullptr, m_86e99aa77f1a404e,
  0, 1, i_86e99aa77f1a404e, nullptr, nullptr, { &s_86e99aa77f1a404e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_e3a20a01e6885cf3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    243,  92, 136, 230,   1,  10, 162, 227,
     46,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 100, 108,  47,  99,  97, 112, 110,
    112,  95, 115, 101, 114, 118, 105,  99,
    101,  46,  99,  97, 112, 110, 112,  58,
     67,  97, 112, 110, 112,  83, 101, 114,
    118, 105,  99, 101,  66, 101, 110,  99,
    104, 109,  97, 114, 107,  46, 103, 101,
    116,  83, 116, 114, 117,  99, 116, 115,
     36,  80,  97, 114,  97, 109, 115,   0, }
};
::capnp::word const* const bp_e3a20a01e6885cf3 = b_e3a20a01e6885cf3.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e3a20a01e6885cf3 = {
  0xe3a20a01e6885cf3, b_e3a20a01e6885cf3.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e3a20a01e6885cf3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_84bd4a8562722646 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     70,  38, 114,  98, 133,  74, 189, 132,
     46,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 100, 108,  47,  99,  97, 112, 110,
    112,  95, 115, 101, 114, 118, 105,  99,
    101,  46,  99,  97, 112, 110, 112,  58,
     67,  97, 112, 110, 112,  83, 101, 114,
    118, 105,  99, 101,  66, 101, 110,  99,
    104, 109,  97, 114, 107,  46, 103, 101,
    116,  83, 116, 114, 117,  99, 116, 115,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     70,  20,  39,  94, 232,  10, 239, 210,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_84bd4a8562722646 = b_84bd4a8562722646.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_84bd4a8562722646[] = {
  &s_d2ef0ae85e271446,
};
static const uint16_t m_84bd4a8562722646[] = {0};
static const uint16_t i_84bd4a8562722646[] = {0};
const ::capnp::_::RawSchema s_84bd4a8562722646 = {
  0x84bd4a8562722646, b_84bd4a8562722646.words, 37, d_84bd4a8562722646, m_84bd4a8562722646,
  1, 1, i_84bd4a8562722646, nullptr, nullptr, { &s_84bd4a8562722646, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace capnp_code {

// Date
constexpr uint16_t Date::_capnpPrivate::dataWordSize;
constexpr uint16_t Date::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Date::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Date::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Address
constexpr uint16_t Address::_capnpPrivate::dataWordSize;
constexpr uint16_t Address::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Address::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Address::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// School
constexpr uint16_t School::_capnpPrivate::dataWordSize;
constexpr uint16_t School::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind School::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* School::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Subject
constexpr uint16_t Subject::_capnpPrivate::dataWordSize;
constexpr uint16_t Subject::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Subject::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Subject::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Student
constexpr uint16_t Student::_capnpPrivate::dataWordSize;
constexpr uint16_t Student::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Student::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Student::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// StudentDataResponse
constexpr uint16_t StudentDataResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t StudentDataResponse::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind StudentDataResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* StudentDataResponse::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::capnp_code::CapnpServiceBenchmark::GetAnswerParams,  ::capnp_code::CapnpServiceBenchmark::GetAnswerResults>
CapnpServiceBenchmark::Client::getAnswerRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::capnp_code::CapnpServiceBenchmark::GetAnswerParams,  ::capnp_code::CapnpServiceBenchmark::GetAnswerResults>(
      0xb06fe64f26aed999ull, 0, sizeHint);
}
::kj::Promise<void> CapnpServiceBenchmark::Server::getAnswer(GetAnswerContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "idl/capnp_service.capnp:CapnpServiceBenchmark", "getAnswer",
      0xb06fe64f26aed999ull, 0);
}
::capnp::Request< ::capnp_code::CapnpServiceBenchmark::GetBlobParams,  ::capnp_code::CapnpServiceBenchmark::GetBlobResults>
CapnpServiceBenchmark::Client::getBlobRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::capnp_code::CapnpServiceBenchmark::GetBlobParams,  ::capnp_code::CapnpServiceBenchmark::GetBlobResults>(
      0xb06fe64f26aed999ull, 1, sizeHint);
}
::kj::Promise<void> CapnpServiceBenchmark::Server::getBlob(GetBlobContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "idl/capnp_service.capnp:CapnpServiceBenchmark", "getBlob",
      0xb06fe64f26aed999ull, 1);
}
::capnp::Request< ::capnp_code::CapnpServiceBenchmark::GetStructsParams,  ::capnp_code::CapnpServiceBenchmark::GetStructsResults>
CapnpServiceBenchmark::Client::getStructsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::capnp_code::CapnpServiceBenchmark::GetStructsParams,  ::capnp_code::CapnpServiceBenchmark::GetStructsResults>(
      0xb06fe64f26aed999ull, 2, sizeHint);
}
::kj::Promise<void> CapnpServiceBenchmark::Server::getStructs(GetStructsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "idl/capnp_service.capnp:CapnpServiceBenchmark", "getStructs",
      0xb06fe64f26aed999ull, 2);
}
::kj::Promise<void> CapnpServiceBenchmark::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xb06fe64f26aed999ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("idl/capnp_service.capnp:CapnpServiceBenchmark", interfaceId);
  }
}
::kj::Promise<void> CapnpServiceBenchmark::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return getAnswer(::capnp::Capability::Server::internalGetTypedContext<
           ::capnp_code::CapnpServiceBenchmark::GetAnswerParams,  ::capnp_code::CapnpServiceBenchmark::GetAnswerResults>(context));
    case 1:
      return getBlob(::capnp::Capability::Server::internalGetTypedContext<
           ::capnp_code::CapnpServiceBenchmark::GetBlobParams,  ::capnp_code::CapnpServiceBenchmark::GetBlobResults>(context));
    case 2:
      return getStructs(::capnp::Capability::Server::internalGetTypedContext<
           ::capnp_code::CapnpServiceBenchmark::GetStructsParams,  ::capnp_code::CapnpServiceBenchmark::GetStructsResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "idl/capnp_service.capnp:CapnpServiceBenchmark",
          0xb06fe64f26aed999ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// CapnpServiceBenchmark
#if !CAPNP_LITE
constexpr ::capnp::Kind CapnpServiceBenchmark::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CapnpServiceBenchmark::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CapnpServiceBenchmark::GetAnswerParams
constexpr uint16_t CapnpServiceBenchmark::GetAnswerParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CapnpServiceBenchmark::GetAnswerParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CapnpServiceBenchmark::GetAnswerParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CapnpServiceBenchmark::GetAnswerParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CapnpServiceBenchmark::GetAnswerResults
constexpr uint16_t CapnpServiceBenchmark::GetAnswerResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CapnpServiceBenchmark::GetAnswerResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CapnpServiceBenchmark::GetAnswerResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CapnpServiceBenchmark::GetAnswerResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CapnpServiceBenchmark::GetBlobParams
constexpr uint16_t CapnpServiceBenchmark::GetBlobParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CapnpServiceBenchmark::GetBlobParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CapnpServiceBenchmark::GetBlobParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CapnpServiceBenchmark::GetBlobParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CapnpServiceBenchmark::GetBlobResults
constexpr uint16_t CapnpServiceBenchmark::GetBlobResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CapnpServiceBenchmark::GetBlobResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CapnpServiceBenchmark::GetBlobResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CapnpServiceBenchmark::GetBlobResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CapnpServiceBenchmark::GetStructsParams
constexpr uint16_t CapnpServiceBenchmark::GetStructsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CapnpServiceBenchmark::GetStructsParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CapnpServiceBenchmark::GetStructsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CapnpServiceBenchmark::GetStructsParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CapnpServiceBenchmark::GetStructsResults
constexpr uint16_t CapnpServiceBenchmark::GetStructsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CapnpServiceBenchmark::GetStructsResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CapnpServiceBenchmark::GetStructsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CapnpServiceBenchmark::GetStructsResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace

