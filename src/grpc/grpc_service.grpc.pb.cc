// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpc_service.proto

#include "grpc_service.pb.h"
#include "grpc_service.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpc_code {

static const char* GrpcServiceBenchmark_method_names[] = {
  "/grpc_code.GrpcServiceBenchmark/get_answer",
  "/grpc_code.GrpcServiceBenchmark/get_blob",
  "/grpc_code.GrpcServiceBenchmark/get_structs",
};

std::unique_ptr< GrpcServiceBenchmark::Stub> GrpcServiceBenchmark::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GrpcServiceBenchmark::Stub> stub(new GrpcServiceBenchmark::Stub(channel));
  return stub;
}

GrpcServiceBenchmark::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_get_answer_(GrpcServiceBenchmark_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_blob_(GrpcServiceBenchmark_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_structs_(GrpcServiceBenchmark_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GrpcServiceBenchmark::Stub::get_answer(::grpc::ClientContext* context, const ::grpc_code::AnswerRequest& request, ::grpc_code::AnswerReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_get_answer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpc_code::AnswerReply>* GrpcServiceBenchmark::Stub::Asyncget_answerRaw(::grpc::ClientContext* context, const ::grpc_code::AnswerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc_code::AnswerReply>::Create(channel_.get(), cq, rpcmethod_get_answer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpc_code::AnswerReply>* GrpcServiceBenchmark::Stub::PrepareAsyncget_answerRaw(::grpc::ClientContext* context, const ::grpc_code::AnswerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc_code::AnswerReply>::Create(channel_.get(), cq, rpcmethod_get_answer_, context, request, false);
}

::grpc::Status GrpcServiceBenchmark::Stub::get_blob(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc_code::BlobResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_get_blob_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpc_code::BlobResponse>* GrpcServiceBenchmark::Stub::Asyncget_blobRaw(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc_code::BlobResponse>::Create(channel_.get(), cq, rpcmethod_get_blob_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpc_code::BlobResponse>* GrpcServiceBenchmark::Stub::PrepareAsyncget_blobRaw(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc_code::BlobResponse>::Create(channel_.get(), cq, rpcmethod_get_blob_, context, request, false);
}

::grpc::Status GrpcServiceBenchmark::Stub::get_structs(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc_code::StudentDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_get_structs_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpc_code::StudentDataResponse>* GrpcServiceBenchmark::Stub::Asyncget_structsRaw(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc_code::StudentDataResponse>::Create(channel_.get(), cq, rpcmethod_get_structs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpc_code::StudentDataResponse>* GrpcServiceBenchmark::Stub::PrepareAsyncget_structsRaw(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpc_code::StudentDataResponse>::Create(channel_.get(), cq, rpcmethod_get_structs_, context, request, false);
}

GrpcServiceBenchmark::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServiceBenchmark_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServiceBenchmark::Service, ::grpc_code::AnswerRequest, ::grpc_code::AnswerReply>(
          std::mem_fn(&GrpcServiceBenchmark::Service::get_answer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServiceBenchmark_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServiceBenchmark::Service, ::grpc_code::EmptyRequest, ::grpc_code::BlobResponse>(
          std::mem_fn(&GrpcServiceBenchmark::Service::get_blob), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GrpcServiceBenchmark_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GrpcServiceBenchmark::Service, ::grpc_code::EmptyRequest, ::grpc_code::StudentDataResponse>(
          std::mem_fn(&GrpcServiceBenchmark::Service::get_structs), this)));
}

GrpcServiceBenchmark::Service::~Service() {
}

::grpc::Status GrpcServiceBenchmark::Service::get_answer(::grpc::ServerContext* context, const ::grpc_code::AnswerRequest* request, ::grpc_code::AnswerReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServiceBenchmark::Service::get_blob(::grpc::ServerContext* context, const ::grpc_code::EmptyRequest* request, ::grpc_code::BlobResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GrpcServiceBenchmark::Service::get_structs(::grpc::ServerContext* context, const ::grpc_code::EmptyRequest* request, ::grpc_code::StudentDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpc_code

