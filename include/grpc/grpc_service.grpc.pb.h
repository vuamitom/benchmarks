// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpc_service.proto
#ifndef GRPC_grpc_5fservice_2eproto__INCLUDED
#define GRPC_grpc_5fservice_2eproto__INCLUDED

#include "grpc_service.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace grpc_code {

class GrpcServiceBenchmark final {
 public:
  static constexpr char const* service_full_name() {
    return "grpc_code.GrpcServiceBenchmark";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status get_answer(::grpc::ClientContext* context, const ::grpc_code::AnswerRequest& request, ::grpc_code::AnswerReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_code::AnswerReply>> Asyncget_answer(::grpc::ClientContext* context, const ::grpc_code::AnswerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_code::AnswerReply>>(Asyncget_answerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_code::AnswerReply>> PrepareAsyncget_answer(::grpc::ClientContext* context, const ::grpc_code::AnswerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_code::AnswerReply>>(PrepareAsyncget_answerRaw(context, request, cq));
    }
    virtual ::grpc::Status get_blob(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc_code::BlobResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_code::BlobResponse>> Asyncget_blob(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_code::BlobResponse>>(Asyncget_blobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_code::BlobResponse>> PrepareAsyncget_blob(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_code::BlobResponse>>(PrepareAsyncget_blobRaw(context, request, cq));
    }
    virtual ::grpc::Status get_structs(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc_code::StudentDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_code::StudentDataResponse>> Asyncget_structs(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_code::StudentDataResponse>>(Asyncget_structsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_code::StudentDataResponse>> PrepareAsyncget_structs(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpc_code::StudentDataResponse>>(PrepareAsyncget_structsRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_code::AnswerReply>* Asyncget_answerRaw(::grpc::ClientContext* context, const ::grpc_code::AnswerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_code::AnswerReply>* PrepareAsyncget_answerRaw(::grpc::ClientContext* context, const ::grpc_code::AnswerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_code::BlobResponse>* Asyncget_blobRaw(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_code::BlobResponse>* PrepareAsyncget_blobRaw(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_code::StudentDataResponse>* Asyncget_structsRaw(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpc_code::StudentDataResponse>* PrepareAsyncget_structsRaw(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status get_answer(::grpc::ClientContext* context, const ::grpc_code::AnswerRequest& request, ::grpc_code::AnswerReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_code::AnswerReply>> Asyncget_answer(::grpc::ClientContext* context, const ::grpc_code::AnswerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_code::AnswerReply>>(Asyncget_answerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_code::AnswerReply>> PrepareAsyncget_answer(::grpc::ClientContext* context, const ::grpc_code::AnswerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_code::AnswerReply>>(PrepareAsyncget_answerRaw(context, request, cq));
    }
    ::grpc::Status get_blob(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc_code::BlobResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_code::BlobResponse>> Asyncget_blob(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_code::BlobResponse>>(Asyncget_blobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_code::BlobResponse>> PrepareAsyncget_blob(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_code::BlobResponse>>(PrepareAsyncget_blobRaw(context, request, cq));
    }
    ::grpc::Status get_structs(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc_code::StudentDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_code::StudentDataResponse>> Asyncget_structs(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_code::StudentDataResponse>>(Asyncget_structsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_code::StudentDataResponse>> PrepareAsyncget_structs(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpc_code::StudentDataResponse>>(PrepareAsyncget_structsRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::grpc_code::AnswerReply>* Asyncget_answerRaw(::grpc::ClientContext* context, const ::grpc_code::AnswerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_code::AnswerReply>* PrepareAsyncget_answerRaw(::grpc::ClientContext* context, const ::grpc_code::AnswerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_code::BlobResponse>* Asyncget_blobRaw(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_code::BlobResponse>* PrepareAsyncget_blobRaw(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_code::StudentDataResponse>* Asyncget_structsRaw(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpc_code::StudentDataResponse>* PrepareAsyncget_structsRaw(::grpc::ClientContext* context, const ::grpc_code::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_get_answer_;
    const ::grpc::internal::RpcMethod rpcmethod_get_blob_;
    const ::grpc::internal::RpcMethod rpcmethod_get_structs_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status get_answer(::grpc::ServerContext* context, const ::grpc_code::AnswerRequest* request, ::grpc_code::AnswerReply* response);
    virtual ::grpc::Status get_blob(::grpc::ServerContext* context, const ::grpc_code::EmptyRequest* request, ::grpc_code::BlobResponse* response);
    virtual ::grpc::Status get_structs(::grpc::ServerContext* context, const ::grpc_code::EmptyRequest* request, ::grpc_code::StudentDataResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_get_answer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_get_answer() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_get_answer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_answer(::grpc::ServerContext* context, const ::grpc_code::AnswerRequest* request, ::grpc_code::AnswerReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_answer(::grpc::ServerContext* context, ::grpc_code::AnswerRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpc_code::AnswerReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get_blob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_get_blob() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_get_blob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_blob(::grpc::ServerContext* context, const ::grpc_code::EmptyRequest* request, ::grpc_code::BlobResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_blob(::grpc::ServerContext* context, ::grpc_code::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpc_code::BlobResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get_structs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_get_structs() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_get_structs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_structs(::grpc::ServerContext* context, const ::grpc_code::EmptyRequest* request, ::grpc_code::StudentDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_structs(::grpc::ServerContext* context, ::grpc_code::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpc_code::StudentDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_get_answer<WithAsyncMethod_get_blob<WithAsyncMethod_get_structs<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_get_answer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_get_answer() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_get_answer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_answer(::grpc::ServerContext* context, const ::grpc_code::AnswerRequest* request, ::grpc_code::AnswerReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get_blob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_get_blob() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_get_blob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_blob(::grpc::ServerContext* context, const ::grpc_code::EmptyRequest* request, ::grpc_code::BlobResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get_structs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_get_structs() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_get_structs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_structs(::grpc::ServerContext* context, const ::grpc_code::EmptyRequest* request, ::grpc_code::StudentDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_answer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_get_answer() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_get_answer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_answer(::grpc::ServerContext* context, const ::grpc_code::AnswerRequest* request, ::grpc_code::AnswerReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_answer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_blob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_get_blob() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_get_blob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_blob(::grpc::ServerContext* context, const ::grpc_code::EmptyRequest* request, ::grpc_code::BlobResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_blob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_structs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_get_structs() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_get_structs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_structs(::grpc::ServerContext* context, const ::grpc_code::EmptyRequest* request, ::grpc_code::StudentDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_structs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_answer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_get_answer() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::grpc_code::AnswerRequest, ::grpc_code::AnswerReply>(std::bind(&WithStreamedUnaryMethod_get_answer<BaseClass>::Streamedget_answer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_get_answer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_answer(::grpc::ServerContext* context, const ::grpc_code::AnswerRequest* request, ::grpc_code::AnswerReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_answer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_code::AnswerRequest,::grpc_code::AnswerReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_blob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_get_blob() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::grpc_code::EmptyRequest, ::grpc_code::BlobResponse>(std::bind(&WithStreamedUnaryMethod_get_blob<BaseClass>::Streamedget_blob, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_get_blob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_blob(::grpc::ServerContext* context, const ::grpc_code::EmptyRequest* request, ::grpc_code::BlobResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_blob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_code::EmptyRequest,::grpc_code::BlobResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_structs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_get_structs() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::grpc_code::EmptyRequest, ::grpc_code::StudentDataResponse>(std::bind(&WithStreamedUnaryMethod_get_structs<BaseClass>::Streamedget_structs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_get_structs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_structs(::grpc::ServerContext* context, const ::grpc_code::EmptyRequest* request, ::grpc_code::StudentDataResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_structs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpc_code::EmptyRequest,::grpc_code::StudentDataResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_get_answer<WithStreamedUnaryMethod_get_blob<WithStreamedUnaryMethod_get_structs<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_get_answer<WithStreamedUnaryMethod_get_blob<WithStreamedUnaryMethod_get_structs<Service > > > StreamedService;
};

}  // namespace grpc_code


#endif  // GRPC_grpc_5fservice_2eproto__INCLUDED
